import org.apache.tools.ant.taskdefs.condition.Os

group rootProject.group
version rootProject.version

apply plugin: 'java'
apply plugin: 'war'

ext {
    exploded_path = "${war.archivePath.parent}/exploded"
    catlina_home = System.getenv("CATALINA_HOME") ?: ""
    println "CATALINA_HOME is $catlina_home"
    server_port = 8080
    service_name = 'cors'
}

sourceCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
}

task explodedWar(type: Sync) {
    into exploded_path
    with war
}

task shutdownTomcat() {
    if (exists(catlina_home) && serverListening('localhost', server_port)) {
        ProcessBuilder pb = new ProcessBuilder(generateCommandLine("$catlina_home/bin/shutdown.bat"))
        pb.directory(new File(catlina_home))
        Process proc = pb.start()
        proc.waitFor()
    }
}
shutdownTomcat.onlyIf { exists(catlina_home) && serverListening('localhost', server_port) }

task copyToTomcat(type: Sync, dependsOn: [explodedWar, shutdownTomcat]) {
    if (exists(catlina_home)) {
        into "$catlina_home/webapps/$service_name"
        with war
    }
}
copyToTomcat.onlyIf { exists(catlina_home) }

task startupTomcat(dependsOn: copyToTomcat) {
    if (exists(catlina_home)) {
        ProcessBuilder pb = new ProcessBuilder(generateCommandLine("$catlina_home/bin/startup.bat"))
        pb.directory(new File(catlina_home))
        Process proc = pb.start()
        proc.waitFor()
    }
    if (serverListening('localhost', server_port)) {
        println "CORS Test url is http://localhost:$server_port/$service_name"
    }
}
startupTomcat.onlyIf { exists(catlina_home) }

private static List<String> generateCommandLine(String commandLineString) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return ["cmd", "/c", absolutePath(commandLineString.replaceAll(/\.sh$/, '.bat'))]
    } else {
        return ["sh", absolutePath(commandLineString.replaceAll(/\.bat$/, '.sh'))]
    }
}

private static boolean exists(String fileOrDir) {
    return !fileOrDir.isEmpty() && new File(fileOrDir).exists()
}

private static String absolutePath(String command) {
    return new File(command).absolutePath
}

private static boolean serverListening(String host, int port) {
    Socket s = null
    try {
        s = new Socket(host, port)
        return true
    } catch (ignore) {
        return false
    } finally {
        if (s != null)
            try {
                s.close()
            } catch (ignore) {
            }
    }
}
