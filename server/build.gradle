import java.awt.*

group rootProject.group
version rootProject.version

apply plugin: 'java'
apply plugin: 'war'

ext {
    exploded_path = "${war.archivePath.parent}/exploded"
    catlina_home = System.getenv("CATALINA_HOME") ?: ""
    println "CATALINA_HOME is $catlina_home"
    server_port = 8080
    service_name = 'cors'
}

sourceCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
}

task explodedWar(type: Sync) {
    into exploded_path
    with war
}

task shutdownTomcat() {
    if (exists(catlina_home) && serverListening('localhost', server_port)) {
        exec {
            workingDir catlina_home
            commandLine "cmd", "/c", absolutePath("$catlina_home/bin/shutdown.bat")
        }
    }
}
shutdownTomcat.onlyIf { exists(catlina_home) && serverListening('localhost', server_port) }

task copyToTomcat(type: Sync, dependsOn: [explodedWar, shutdownTomcat]) {
    if (exists(catlina_home)) {
        into "$catlina_home/webapps/$service_name"
        with war
    }
}
copyToTomcat.onlyIf { exists(catlina_home) }

task startupTomcat(dependsOn: copyToTomcat) {
    if (exists(catlina_home)) {
        ProcessBuilder pb = new ProcessBuilder(["cmd", "/c", absolutePath("$catlina_home/bin/startup.bat")])
        pb.directory(new File(catlina_home))
        Process proc = pb.start()
        proc.waitFor()
    }
}
startupTomcat.onlyIf { exists(catlina_home) }

task runServer(dependsOn: startupTomcat) {
    if (Desktop.isDesktopSupported() && serverListening('localhost', server_port)) {
        Desktop.getDesktop().browse(new URI("http://localhost:$server_port/$service_name"))
    }
}
runServer.onlyIf { serverListening('localhost', server_port) }

private static boolean exists(String fileOrDir) {
    return !fileOrDir.isEmpty() && new File(fileOrDir).exists()
}

private static String absolutePath(String command) {
    return new File(command).absolutePath
}

private static boolean serverListening(String host, int port) {
    Socket s = null
    try {
        s = new Socket(host, port)
        return true
    } catch (ignore) {
        return false
    } finally {
        if (s != null)
            try {
                s.close()
            } catch (ignore) {
            }
    }
}
